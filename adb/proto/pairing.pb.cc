// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pairing.proto

#include "pairing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace adb {
namespace proto {
class PairingPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PairingPacket> _instance;
} _PairingPacket_default_instance_;
}  // namespace proto
}  // namespace adb
static void InitDefaultsscc_info_PairingPacket_pairing_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adb::proto::_PairingPacket_default_instance_;
    new (ptr) ::adb::proto::PairingPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adb::proto::PairingPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PairingPacket_pairing_2eproto =
    {{{::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized}, 0, InitDefaultsscc_info_PairingPacket_pairing_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pairing_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pairing_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pairing_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pairing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adb::proto::PairingPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::adb::proto::PairingPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adb::proto::_PairingPacket_default_instance_),
};

const char descriptor_table_protodef_pairing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpairing.proto\022\tadb.proto\"6\n\rPairingPac"
  "ket\"%\n\004Type\022\016\n\nSPAKE2_MSG\020\000\022\r\n\tPEER_INFO"
  "\020\001B-\n\035com.android.server.adb.protosB\014Pai"
  "ringProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pairing_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pairing_2eproto_sccs[1] = {
  &scc_info_PairingPacket_pairing_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pairing_2eproto_once;
static bool descriptor_table_pairing_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pairing_2eproto = {
  &descriptor_table_pairing_2eproto_initialized, descriptor_table_protodef_pairing_2eproto, "pairing.proto", 137,
  &descriptor_table_pairing_2eproto_once, descriptor_table_pairing_2eproto_sccs, descriptor_table_pairing_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_pairing_2eproto::offsets,
  file_level_metadata_pairing_2eproto, 1, file_level_enum_descriptors_pairing_2eproto, file_level_service_descriptors_pairing_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pairing_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pairing_2eproto), true);
namespace adb {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PairingPacket_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pairing_2eproto);
  return file_level_enum_descriptors_pairing_2eproto[0];
}
bool PairingPacket_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PairingPacket_Type PairingPacket::SPAKE2_MSG;
constexpr PairingPacket_Type PairingPacket::PEER_INFO;
constexpr PairingPacket_Type PairingPacket::Type_MIN;
constexpr PairingPacket_Type PairingPacket::Type_MAX;
constexpr int PairingPacket::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PairingPacket::InitAsDefaultInstance() {
}
class PairingPacket::_Internal {
 public:
};

PairingPacket::PairingPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adb.proto.PairingPacket)
}
PairingPacket::PairingPacket(const PairingPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adb.proto.PairingPacket)
}

void PairingPacket::SharedCtor() {
}

PairingPacket::~PairingPacket() {
  // @@protoc_insertion_point(destructor:adb.proto.PairingPacket)
  SharedDtor();
}

void PairingPacket::SharedDtor() {
}

void PairingPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PairingPacket& PairingPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PairingPacket_pairing_2eproto.base);
  return *internal_default_instance();
}


void PairingPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:adb.proto.PairingPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PairingPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PairingPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adb.proto.PairingPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:adb.proto.PairingPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adb.proto.PairingPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PairingPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adb.proto.PairingPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adb.proto.PairingPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* PairingPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adb.proto.PairingPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adb.proto.PairingPacket)
  return target;
}

size_t PairingPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adb.proto.PairingPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PairingPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adb.proto.PairingPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const PairingPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PairingPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adb.proto.PairingPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adb.proto.PairingPacket)
    MergeFrom(*source);
  }
}

void PairingPacket::MergeFrom(const PairingPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adb.proto.PairingPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PairingPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adb.proto.PairingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairingPacket::CopyFrom(const PairingPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adb.proto.PairingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairingPacket::IsInitialized() const {
  return true;
}

void PairingPacket::InternalSwap(PairingPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PairingPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::adb::proto::PairingPacket* Arena::CreateMaybeMessage< ::adb::proto::PairingPacket >(Arena* arena) {
  return Arena::CreateInternal< ::adb::proto::PairingPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
