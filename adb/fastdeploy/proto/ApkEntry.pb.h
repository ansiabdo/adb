// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApkEntry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ApkEntry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ApkEntry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ApkEntry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ApkEntry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ApkEntry_2eproto;
namespace com {
namespace android {
namespace fastdeploy {
class APKDump;
class APKDumpDefaultTypeInternal;
extern APKDumpDefaultTypeInternal _APKDump_default_instance_;
class APKEntry;
class APKEntryDefaultTypeInternal;
extern APKEntryDefaultTypeInternal _APKEntry_default_instance_;
class APKMetaData;
class APKMetaDataDefaultTypeInternal;
extern APKMetaDataDefaultTypeInternal _APKMetaData_default_instance_;
}  // namespace fastdeploy
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::fastdeploy::APKDump* Arena::CreateMaybeMessage<::com::android::fastdeploy::APKDump>(Arena*);
template<> ::com::android::fastdeploy::APKEntry* Arena::CreateMaybeMessage<::com::android::fastdeploy::APKEntry>(Arena*);
template<> ::com::android::fastdeploy::APKMetaData* Arena::CreateMaybeMessage<::com::android::fastdeploy::APKMetaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace fastdeploy {

// ===================================================================

class APKDump :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.fastdeploy.APKDump) */ {
 public:
  APKDump();
  virtual ~APKDump();

  APKDump(const APKDump& from);
  APKDump(APKDump&& from) noexcept
    : APKDump() {
    *this = ::std::move(from);
  }

  inline APKDump& operator=(const APKDump& from) {
    CopyFrom(from);
    return *this;
  }
  inline APKDump& operator=(APKDump&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const APKDump& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const APKDump* internal_default_instance() {
    return reinterpret_cast<const APKDump*>(
               &_APKDump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(APKDump& a, APKDump& b) {
    a.Swap(&b);
  }
  inline void Swap(APKDump* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APKDump* New() const final {
    return CreateMaybeMessage<APKDump>(nullptr);
  }

  APKDump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APKDump>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APKDump& from);
  void MergeFrom(const APKDump& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APKDump* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.fastdeploy.APKDump";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApkEntry_2eproto);
    return ::descriptor_table_ApkEntry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCdFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kAbsolutePathFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bytes cd = 2;
  void clear_cd();
  const std::string& cd() const;
  void set_cd(const std::string& value);
  void set_cd(std::string&& value);
  void set_cd(const char* value);
  void set_cd(const void* value, size_t size);
  std::string* mutable_cd();
  std::string* release_cd();
  void set_allocated_cd(std::string* cd);

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // string absolute_path = 4;
  void clear_absolute_path();
  const std::string& absolute_path() const;
  void set_absolute_path(const std::string& value);
  void set_absolute_path(std::string&& value);
  void set_absolute_path(const char* value);
  void set_absolute_path(const char* value, size_t size);
  std::string* mutable_absolute_path();
  std::string* release_absolute_path();
  void set_allocated_absolute_path(std::string* absolute_path);

  // @@protoc_insertion_point(class_scope:com.android.fastdeploy.APKDump)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ApkEntry_2eproto;
};
// -------------------------------------------------------------------

class APKEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.fastdeploy.APKEntry) */ {
 public:
  APKEntry();
  virtual ~APKEntry();

  APKEntry(const APKEntry& from);
  APKEntry(APKEntry&& from) noexcept
    : APKEntry() {
    *this = ::std::move(from);
  }

  inline APKEntry& operator=(const APKEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline APKEntry& operator=(APKEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const APKEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const APKEntry* internal_default_instance() {
    return reinterpret_cast<const APKEntry*>(
               &_APKEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(APKEntry& a, APKEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(APKEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APKEntry* New() const final {
    return CreateMaybeMessage<APKEntry>(nullptr);
  }

  APKEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APKEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APKEntry& from);
  void MergeFrom(const APKEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APKEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.fastdeploy.APKEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApkEntry_2eproto);
    return ::descriptor_table_ApkEntry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
    kDataOffsetFieldNumber = 2,
    kDataSizeFieldNumber = 3,
  };
  // bytes md5 = 1;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const void* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);

  // int64 dataOffset = 2;
  void clear_dataoffset();
  ::PROTOBUF_NAMESPACE_ID::int64 dataoffset() const;
  void set_dataoffset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 dataSize = 3;
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::int64 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.fastdeploy.APKEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::int64 dataoffset_;
  ::PROTOBUF_NAMESPACE_ID::int64 datasize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ApkEntry_2eproto;
};
// -------------------------------------------------------------------

class APKMetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.fastdeploy.APKMetaData) */ {
 public:
  APKMetaData();
  virtual ~APKMetaData();

  APKMetaData(const APKMetaData& from);
  APKMetaData(APKMetaData&& from) noexcept
    : APKMetaData() {
    *this = ::std::move(from);
  }

  inline APKMetaData& operator=(const APKMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline APKMetaData& operator=(APKMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const APKMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const APKMetaData* internal_default_instance() {
    return reinterpret_cast<const APKMetaData*>(
               &_APKMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(APKMetaData& a, APKMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(APKMetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APKMetaData* New() const final {
    return CreateMaybeMessage<APKMetaData>(nullptr);
  }

  APKMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APKMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APKMetaData& from);
  void MergeFrom(const APKMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APKMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.fastdeploy.APKMetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ApkEntry_2eproto);
    return ::descriptor_table_ApkEntry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kAbsolutePathFieldNumber = 1,
  };
  // repeated .com.android.fastdeploy.APKEntry entries = 2;
  int entries_size() const;
  void clear_entries();
  ::com::android::fastdeploy::APKEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry >*
      mutable_entries();
  const ::com::android::fastdeploy::APKEntry& entries(int index) const;
  ::com::android::fastdeploy::APKEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry >&
      entries() const;

  // string absolute_path = 1;
  void clear_absolute_path();
  const std::string& absolute_path() const;
  void set_absolute_path(const std::string& value);
  void set_absolute_path(std::string&& value);
  void set_absolute_path(const char* value);
  void set_absolute_path(const char* value, size_t size);
  std::string* mutable_absolute_path();
  std::string* release_absolute_path();
  void set_allocated_absolute_path(std::string* absolute_path);

  // @@protoc_insertion_point(class_scope:com.android.fastdeploy.APKMetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ApkEntry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// APKDump

// string name = 1;
inline void APKDump::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APKDump::name() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKDump.name)
  return name_.GetNoArena();
}
inline void APKDump::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKDump.name)
}
inline void APKDump::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.fastdeploy.APKDump.name)
}
inline void APKDump::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.fastdeploy.APKDump.name)
}
inline void APKDump::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.fastdeploy.APKDump.name)
}
inline std::string* APKDump::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKDump.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APKDump::release_name() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKDump.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APKDump::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKDump.name)
}

// bytes cd = 2;
inline void APKDump::clear_cd() {
  cd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APKDump::cd() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKDump.cd)
  return cd_.GetNoArena();
}
inline void APKDump::set_cd(const std::string& value) {
  
  cd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKDump.cd)
}
inline void APKDump::set_cd(std::string&& value) {
  
  cd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.fastdeploy.APKDump.cd)
}
inline void APKDump::set_cd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.fastdeploy.APKDump.cd)
}
inline void APKDump::set_cd(const void* value, size_t size) {
  
  cd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.fastdeploy.APKDump.cd)
}
inline std::string* APKDump::mutable_cd() {
  
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKDump.cd)
  return cd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APKDump::release_cd() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKDump.cd)
  
  return cd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APKDump::set_allocated_cd(std::string* cd) {
  if (cd != nullptr) {
    
  } else {
    
  }
  cd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cd);
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKDump.cd)
}

// bytes signature = 3;
inline void APKDump::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APKDump::signature() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKDump.signature)
  return signature_.GetNoArena();
}
inline void APKDump::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKDump.signature)
}
inline void APKDump::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.fastdeploy.APKDump.signature)
}
inline void APKDump::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.fastdeploy.APKDump.signature)
}
inline void APKDump::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.fastdeploy.APKDump.signature)
}
inline std::string* APKDump::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKDump.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APKDump::release_signature() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKDump.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APKDump::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKDump.signature)
}

// string absolute_path = 4;
inline void APKDump::clear_absolute_path() {
  absolute_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APKDump::absolute_path() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKDump.absolute_path)
  return absolute_path_.GetNoArena();
}
inline void APKDump::set_absolute_path(const std::string& value) {
  
  absolute_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKDump.absolute_path)
}
inline void APKDump::set_absolute_path(std::string&& value) {
  
  absolute_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.fastdeploy.APKDump.absolute_path)
}
inline void APKDump::set_absolute_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  absolute_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.fastdeploy.APKDump.absolute_path)
}
inline void APKDump::set_absolute_path(const char* value, size_t size) {
  
  absolute_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.fastdeploy.APKDump.absolute_path)
}
inline std::string* APKDump::mutable_absolute_path() {
  
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKDump.absolute_path)
  return absolute_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APKDump::release_absolute_path() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKDump.absolute_path)
  
  return absolute_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APKDump::set_allocated_absolute_path(std::string* absolute_path) {
  if (absolute_path != nullptr) {
    
  } else {
    
  }
  absolute_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), absolute_path);
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKDump.absolute_path)
}

// -------------------------------------------------------------------

// APKEntry

// bytes md5 = 1;
inline void APKEntry::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APKEntry::md5() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKEntry.md5)
  return md5_.GetNoArena();
}
inline void APKEntry::set_md5(const std::string& value) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKEntry.md5)
}
inline void APKEntry::set_md5(std::string&& value) {
  
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.fastdeploy.APKEntry.md5)
}
inline void APKEntry::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.fastdeploy.APKEntry.md5)
}
inline void APKEntry::set_md5(const void* value, size_t size) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.fastdeploy.APKEntry.md5)
}
inline std::string* APKEntry::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKEntry.md5)
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APKEntry::release_md5() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKEntry.md5)
  
  return md5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APKEntry::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKEntry.md5)
}

// int64 dataOffset = 2;
inline void APKEntry::clear_dataoffset() {
  dataoffset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 APKEntry::dataoffset() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKEntry.dataOffset)
  return dataoffset_;
}
inline void APKEntry::set_dataoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dataoffset_ = value;
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKEntry.dataOffset)
}

// int64 dataSize = 3;
inline void APKEntry::clear_datasize() {
  datasize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 APKEntry::datasize() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKEntry.dataSize)
  return datasize_;
}
inline void APKEntry::set_datasize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datasize_ = value;
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKEntry.dataSize)
}

// -------------------------------------------------------------------

// APKMetaData

// string absolute_path = 1;
inline void APKMetaData::clear_absolute_path() {
  absolute_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APKMetaData::absolute_path() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKMetaData.absolute_path)
  return absolute_path_.GetNoArena();
}
inline void APKMetaData::set_absolute_path(const std::string& value) {
  
  absolute_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKMetaData.absolute_path)
}
inline void APKMetaData::set_absolute_path(std::string&& value) {
  
  absolute_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.fastdeploy.APKMetaData.absolute_path)
}
inline void APKMetaData::set_absolute_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  absolute_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.fastdeploy.APKMetaData.absolute_path)
}
inline void APKMetaData::set_absolute_path(const char* value, size_t size) {
  
  absolute_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.fastdeploy.APKMetaData.absolute_path)
}
inline std::string* APKMetaData::mutable_absolute_path() {
  
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKMetaData.absolute_path)
  return absolute_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APKMetaData::release_absolute_path() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKMetaData.absolute_path)
  
  return absolute_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APKMetaData::set_allocated_absolute_path(std::string* absolute_path) {
  if (absolute_path != nullptr) {
    
  } else {
    
  }
  absolute_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), absolute_path);
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKMetaData.absolute_path)
}

// repeated .com.android.fastdeploy.APKEntry entries = 2;
inline int APKMetaData::entries_size() const {
  return entries_.size();
}
inline void APKMetaData::clear_entries() {
  entries_.Clear();
}
inline ::com::android::fastdeploy::APKEntry* APKMetaData::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKMetaData.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry >*
APKMetaData::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.android.fastdeploy.APKMetaData.entries)
  return &entries_;
}
inline const ::com::android::fastdeploy::APKEntry& APKMetaData::entries(int index) const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKMetaData.entries)
  return entries_.Get(index);
}
inline ::com::android::fastdeploy::APKEntry* APKMetaData::add_entries() {
  // @@protoc_insertion_point(field_add:com.android.fastdeploy.APKMetaData.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry >&
APKMetaData::entries() const {
  // @@protoc_insertion_point(field_list:com.android.fastdeploy.APKMetaData.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fastdeploy
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ApkEntry_2eproto
